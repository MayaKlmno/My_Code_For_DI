'''
This is the code which I used for my sister and my project, for states where we won first place, allowing us to transition on to globals. 
- I am planning to change this code, to make it better for globals though. 

Currently this controls 2 window motors to pull a quarter circle holding half an arch. The window motor, controlled by the a key pulls it onto the scaffold, leaving the arch behind. The other window motor does the same thing. Leaving an arch behind.
- If you want to see a video of how it works, you can check my instagram account. the video will be uploaded soon. 

Additionally this is my last DI year.

This code is not my final draft. I changed it a few times after this version. 
'''


'''
important to remmember:
- nano (file)
	- this lets you code
- ls
	- lets you know all the files
- python (file)
	- lets you run the file
'''

from threading import Thread
import sys
import smbus
import RPi.GPIO as GPIO


I2C_ADR = 0x11
# I2C_ADR = 0x10
I2C_BUS = 1
bus = smbus.SMBus(I2C_BUS)


def bothForward():
	# TODO: this has to have two of the realys open but for the forward
	bus.write_byte_data(I2C_ADR, 1, 0xFF)
	bus.write_byte_data(I2C_ADR, 2, 0x00)
	bus.write_byte_data(I2C_ADR, 3, 0x00)
	bus.write_byte_data(I2C_ADR, 4, 0xFF)

def bothBackward():
	#TODO: this one also needs two of the relays open but for the backward
	bus.write_byte_data(I2C_ADR, 1, 0x00)
	bus.write_byte_data(I2C_ADR, 2, 0xFF)
	bus.write_byte_data(I2C_ADR, 3, 0xFF)
	bus.write_byte_data(I2C_ADR, 4, 0x00)

def leftForward():
	bus.write_byte_data(I2C_ADR, 1, 0x00)
	bus.write_byte_data(I2C_ADR, 2, 0x00)
	bus.write_byte_data(I2C_ADR, 3, 0x00)
	bus.write_byte_data(I2C_ADR, 4, 0xFF)

def rightForward():
	bus.write_byte_data(I2C_ADR, 1, 0xFF)
	bus.write_byte_data(I2C_ADR, 2, 0x00)
	bus.write_byte_data(I2C_ADR, 3, 0x00)
	bus.write_byte_data(I2C_ADR, 4, 0x00)

def leftBackward():
	bus.write_byte_data(I2C_ADR, 1, 0x00)
	bus.write_byte_data(I2C_ADR, 2, 0x00)
	bus.write_byte_data(I2C_ADR, 3, 0xFF)
	bus.write_byte_data(I2C_ADR, 4, 0x00)

def rightBackward():
	bus.write_byte_data(I2C_ADR, 1, 0x00)
	bus.write_byte_data(I2C_ADR, 2, 0xFF)
	bus.write_byte_data(I2C_ADR, 3, 0x00)
	bus.write_byte_data(I2C_ADR, 4, 0x00)

def bothStop():
	bus.write_byte_data(I2C_ADR, 1, 0x00)
	bus.write_byte_data(I2C_ADR, 2, 0x00)
	bus.write_byte_data(I2C_ADR, 3, 0x00)
	bus.write_byte_data(I2C_ADR, 4, 0x00)


while True:
	try:
		option = input()

		if option == 'a':
			bothForward()
			print("both forward")

		elif option == 'd':
			bothBackward()
			print("both backward")

		elif option == 's':
			bothStop()
			print("both stop")

		elif option == 'r':
			rightForward()
			print("right forward")

		elif option == 't':
			rightBackward()
			print("right backward")

		elif option == 'l':
			leftForward()
			print("left foward")

		elif option == 'k':
			leftBackward()
			print("left backward")

	except KeyboardInterrupt as e:
		print("Interrupted")
		sys.exit()
